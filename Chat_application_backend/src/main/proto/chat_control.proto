syntax = "proto3";

package rs.raf.pds.v4.z5.grpc;

option java_multiple_files = true;
option java_package = "rs.raf.pds.v4.z5.grpc";
option java_outer_classname = "ChatControlProto";

// -------------------- MODELI --------------------

message StoredMessage {
  int64 id = 1;
  string room = 2;         // #room za sobe, "" ili "userA|userB" za DM
  string fromUser = 3;     // @korisnik
  string text = 4;         
  int64 ts = 5;            // timestamp
  int64 replyToId = 6;     // opcionalno - na koju poruku odgovara
  string replyExcerpt = 7; // excerpt iz poruke na koju se odgovara (popunjava server)
  bool edited = 8;         // da li je poruka editovana
}

message Room {
  string name = 1;
  int64 createdAt = 2;
  repeated string members = 3;
}

message PendingInvite {
  string room = 1;
  string invitedUser = 2;
  string invitedBy = 3;
  int64 ts = 4;
}

// -------------------- ZAHTEVI / ODGOVORI --------------------

// Kreiranje sobe
message CreateRoomRequest {
  string name = 1;
  string owner = 2;
}

// Pozivanje korisnika
message InviteUsersRequest {
  string room = 1;
  repeated string users = 2;
}

// Listanje soba
message ListRoomsRequest {}

// Join sobu i dobijanje poslednjih 10 poruka
message JoinRoomRequest {
  string room = 1;
  string user = 2;
}

message JoinRoomResponse {
  Room room = 1;
  repeated StoredMessage last10 = 2;
}
message LeaveRoomRequest {
  string room = 1;
  string user = 2;
}
message LeaveRoomResponse {
  bool success = 1;
}

// Dohvatanje starijih poruka
message MoreRoomRequest {
  string room = 1;
  int64 beforeId = 2;
  int32 count = 3;
}

message MoreRoomResponse {
  repeated StoredMessage messages = 1;
  bool hasMore = 2;
  int64 nextBeforeId = 3;
}

// Direktne poruke (DM)
message DMKey {
  string userA = 1;
  string userB = 2;
}

message DMHistoryResponse {
  repeated StoredMessage messages = 1;
  bool hasMore = 2;
  int64 nextBeforeId = 3;
}

// Slanje poruke u sobu
message SendRoomMessageRequest {
  string room = 1;
  string fromUser = 2;
  string text = 3;
  int64 replyToId = 4; // 0 = bez reply-a
}

message SendRoomMessageResponse {
  StoredMessage message = 1;
}

// Edit poruke
message EditMessageRequest {
  int64 id = 1;
  string editor = 2;
  string newText = 3;
  string room = 4; // "#" za sobe, "" ili "userA|userB" za DM
  string toUser = 5; 
}

message EditMessageResponse {
  StoredMessage message = 1;
}

// Multicast poruke
message SendMulticastRequest {
  repeated string users = 1;
  string fromUser = 2;
  string text = 3;
}

message SendMulticastResponse {
  repeated StoredMessage messages = 1;
}

// Accept/Reject invite
message RespondInviteRequest {
  string user = 1;
  string room = 2;
  bool accept = 3;
}

message RespondInviteResponse {
  Room room = 1;
  repeated StoredMessage last10 = 2;
}

// Pregled liste invite-ova
message ListInvitesRequest {
  string user = 1;
}

message ListInvitesResponse {
  repeated PendingInvite invites = 1;
}

// -------------------- SERVIS --------------------

service ChatControl {
  rpc createRoom(CreateRoomRequest) returns (Room);
  rpc inviteUsers(InviteUsersRequest) returns (Room);
  rpc listRooms(ListRoomsRequest) returns (stream Room);
  rpc joinRoom(JoinRoomRequest) returns (JoinRoomResponse);
  rpc getMoreRoom(MoreRoomRequest) returns (MoreRoomResponse);
  rpc leaveRoom(LeaveRoomRequest) returns (LeaveRoomResponse);
  

  rpc getLastDM(DMKey) returns (DMHistoryResponse);

  rpc sendRoomMessage(SendRoomMessageRequest) returns (SendRoomMessageResponse);
  rpc editMessage(EditMessageRequest) returns (EditMessageResponse);
  rpc sendMulticast(SendMulticastRequest) returns (SendMulticastResponse);

  rpc respondInvite(RespondInviteRequest) returns (RespondInviteResponse);
  rpc listInvites(ListInvitesRequest) returns (ListInvitesResponse);
}
